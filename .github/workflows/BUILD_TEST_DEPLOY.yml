name: Build/Test/Deploy
on:
   workflow_call:
      inputs:
         SONAR_KEY:
            required: true
            type: string
         SONAR_ORG:
            required: true
            type: string
         APP_LOCN:
            required: true
            type: string
         TEST_LOCN:
            required: true
            type: string
      secrets:
         SONAR_TOKEN:
            required: true
         CODECOV:
            required: true
         NUGET_API_KEY:
            required: true

permissions:
  checks: write
  contents: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  
jobs:
  test:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run:  |
                .\.sonar\scanner\dotnet-sonarscanner begin /k:${{ inputs.SONAR_KEY }} /o:${{ inputs.SONAR_ORG }} /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="${{ inputs.TEST_LOCN }}/coverage.opencover.xml" /d:sonar.cs.vstest.reportsPaths="${{ inputs.TEST_LOCN }}/TestResults/*.trx"
                dotnet build --no-incremental --nologo 
                dotnet test --no-build --logger:trx  -e:CollectCoverage=true -e:CoverletOutputFormat=opencover
                .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
                
      - name: Upload Results for Publishing
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: TestResults
          path: |
                ${{ inputs.TEST_LOCN }}/TestResults/*.trx 
                ${{ inputs.TEST_LOCN }}/coverage.opencover.xml
  
  results:
    name: Results
    runs-on: ubuntu-latest
    if: always()
    needs: [ test ]
    steps:
      - name: Download built project  
        uses: actions/download-artifact@v3
        with:
          name: TestResults
        
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
           trx_files: "TestResults/*.trx"

      - name: Code Coverage Report
        uses: codecov/codecov-action@v3
        if: always()
        with:
          token: ${{ secrets.CODECOV }}
          files: coverage.opencover.xml
          
  package:
    name: Package
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' 
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: 7.0.x
            
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Create Nuget Package
        run: |
             dotnet build -c Release -p:Version=${{ steps.tag_version.outputs.new_version }} 

      - name: Find Package
        id:  find
        run: |
           locn=$(find ${BASE_LOCN} -name "*.nupkg")
           name=$(basename ${locn} )
           mv ${locn} ${name}
           echo "Package is ${name}"
           echo "NAME=${name}" >> $GITHUB_OUTPUT
        env:
           BASE_LOCN: ${{ inputs.APP_LOCN }}
           
      - name: Upload Package for Publishing
        uses: actions/upload-artifact@v3
        with:
          name: PackedLib
          path: |
              ${{ steps.find.outputs.NAME }}

  github-publish:
    needs: package
    name: Publish to Github
    runs-on: ubuntu-latest
    steps:
    - name: Download built project  
      uses: actions/download-artifact@v3
      with:
        name: PackedLib
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x
        
    - name: Push Package to GitHub
      run: dotnet nuget push --api-key ${{secrets.GITHUB_TOKEN}} --source "https://nuget.pkg.github.com/sfawcett123/index.json" *.nupkg

  nuget-publish:
    needs: package
    name: Publish to Nuget
    runs-on: ubuntu-latest
    steps:
    - name: Download built project  
      uses: actions/download-artifact@v3
      with:
        name: PackedLib
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 7.0.x
        
    - name: Push Package to Nuget
      run: dotnet nuget push --api-key ${{secrets.NUGET_API_KEY}} --source "https://api.nuget.org/v3/index.json" *.nupkg
